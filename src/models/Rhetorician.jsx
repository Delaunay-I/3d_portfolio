/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 rhetorician.glb 
Author: engine9 (https://sketchfab.com/engine9)
License: CC-BY-SA-4.0 (http://creativecommons.org/licenses/by-sa/4.0/)
Source: https://sketchfab.com/3d-models/rhetorician-a89f035291d843069d73988cc0e25399
Title: Rhetorician
*/


import React, { useRef, useEffect } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import { a } from '@react-spring/three';

import rhetoricianScene from '../assets/3d/rhetorician.glb';

const rhetorician = ({ isRotating, setIsRotating, setCurrentStage, ...props }) => {
  const rhetoricianRef = useRef();
  const numbersRef = useRef();

  const { gl, viewport } = useThree();
  const { nodes, materials, animations } = useGLTF(rhetoricianScene);
  const { actions } = useAnimations(animations, a.group);

   // Use a ref for the last mouse x position
   const lastX = useRef(0);
   // Use a ref for rotation speed
   const rotationSpeed = useRef(0);
   // Define a damping factor to control rotation damping
   const dampingFactor = 0.95;
 
   // Handle pointer (mouse or touch) down event
   const handlePointerDown = (event) => {
     event.stopPropagation();
     event.preventDefault();
     setIsRotating(true);
 
     // Calculate the clientX based on whether it's a touch event or a mouse event
     const clientX = event.touches ? event.touches[0].clientX : event.clientX;
 
     // Store the current clientX position for reference
     lastX.current = clientX;
   };
 
   // Handle pointer (mouse or touch) up event
   const handlePointerUp = (event) => {
     event.stopPropagation();
     event.preventDefault();
     setIsRotating(false);
   };
 
   // Handle pointer (mouse or touch) move event
   const handlePointerMove = (event) => {
     event.stopPropagation();
     event.preventDefault();
     if (isRotating) {
       // If rotation is enabled, calculate the change in clientX position
       const clientX = event.touches ? event.touches[0].clientX : event.clientX;
 
       // calculate the change in the horizontal position of the mouse cursor or touch input,
       // relative to the viewport's width
       const delta = (clientX - lastX.current) / viewport.width;
 
       // Update the model's rotation based on the mouse/touch movement
       rhetoricianRef.current.rotation.y += delta * 0.01 * Math.PI;
 
       // Update the reference for the last clientX position
       lastX.current = clientX;
 
       // Update the rotation speed
       rotationSpeed.current = delta * 0.01 * Math.PI;
     }
   };
 
   // Handle keydown events
   const handleKeyDown = (event) => {
     if (event.key === "ArrowLeft") {
       if (!isRotating) setIsRotating(true);
 
       rhetoricianRef.current.rotation.y += 0.005 * Math.PI;
       rotationSpeed.current = 0.007;
     } else if (event.key === "ArrowRight") {
       if (!isRotating) setIsRotating(true);
 
       rhetoricianRef.current.rotation.y -= 0.005 * Math.PI;
       rotationSpeed.current = -0.007;
     }
   };
 
   // Handle keyup events
   const handleKeyUp = (event) => {
     if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
       setIsRotating(false);
     }
   };
 
   useEffect(() => {
     // Add event listeners for pointer and keyboard events
     const canvas = gl.domElement;
     canvas.addEventListener("pointerdown", handlePointerDown);
     canvas.addEventListener("pointerup", handlePointerUp);
     canvas.addEventListener("pointermove", handlePointerMove);
     window.addEventListener("keydown", handleKeyDown);
     window.addEventListener("keyup", handleKeyUp);
 
     // Remove event listeners when component unmounts
     return () => {
       canvas.removeEventListener("pointerdown", handlePointerDown);
       canvas.removeEventListener("pointerup", handlePointerUp);
       canvas.removeEventListener("pointermove", handlePointerMove);
       window.removeEventListener("keydown", handleKeyDown);
       window.removeEventListener("keyup", handleKeyUp);
     };
   }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);
 
   // This function is called on each frame update
   useFrame(() => {
     // If not rotating, apply damping to slow down the rotation (smoothly)
     if (!isRotating) {
       // Apply damping factor
       rotationSpeed.current *= dampingFactor;
 
       // Stop rotation when speed is very small
       if (Math.abs(rotationSpeed.current) < 0.001) {
         rotationSpeed.current = 0;
       }
 
       rhetoricianRef.current.rotation.y += rotationSpeed.current;
     } else {
       // When rotating, determine the current stage based on model's orientation
       const rotation = rhetoricianRef.current.rotation.y;
 
       /**
        * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
        * The goal is to ensure that the rotation value remains within a specific range to
        * prevent potential issues with very large or negative rotation values.
        *  Here's a step-by-step explanation of what this code does:
        *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
        *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
        *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
        *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
        *     This is done to ensure that the value remains positive and within the range of
        *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
        *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
        *     modulo operation to the value obtained in step 2. This step guarantees that the value
        *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
        *     circle in radians.
        */
       const normalizedRotation =
         ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
 
       // Set the current stage based on the model's orientation
       switch (true) {
         case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
           setCurrentStage(4);
           break;
         case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
           setCurrentStage(3);
           break;
         case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
           setCurrentStage(2);
           break;
         case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
           setCurrentStage(1);
           break;
         default:
           setCurrentStage(null);
       }
     }

     if (numbersRef.current) {
      numbersRef.current.rotation.z += 0.01;
    }
   });


  return (
    <a.group ref={rhetoricianRef} {...props} >
      <a.group name="Sketchfab_Scene">
        <a.group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <a.group name="Root">
            <a.group name="mentor_roman_retopo" position={[-0.266, 0.12, 1.326]}>
              <mesh name="mentor_roman_retopo_0" geometry={nodes.mentor_roman_retopo_0.geometry} material={materials.Stone} />
            </a.group>
            <a.group ref={numbersRef} name="Empty" position={[0.161, -0.17, 4.808]} rotation={[-0.104, 0.099, 0.002]} scale={0.892}>
              <a.group name="nimbus002">
                <mesh name="nimbus002_0" geometry={nodes.nimbus002_0.geometry} material={materials.Crown} />
              </a.group>
              <a.group name="nimbus001">
                <mesh name="nimbus001_0" geometry={nodes.nimbus001_0.geometry} material={materials.Crown} />
              </a.group>
              <a.group name="nimbus003">
                <mesh name="nimbus003_0" geometry={nodes.nimbus003_0.geometry} material={materials.Crown} />
              </a.group>
            </a.group>
          </a.group>
        </a.group>
      </a.group>
    </a.group>
  )
}

export default rhetorician;
